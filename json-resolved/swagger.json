{
  "swagger" : "2.0",
  "info" : {
    "description" : "logs",
    "version" : "1.0.0",
    "title" : "Logs"
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/igorkraskovskiii/TimeSheet/1.0.0",
  "tags" : [ {
    "name" : "Logs",
    "description" : "All about time develop project"
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/logs/get/day" : {
      "get" : {
        "tags" : [ "Logs" ],
        "summary" : "Get logs for today",
        "operationId" : "get logs for Today",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Logs"
              }
            }
          }
        }
      }
    },
    "/logs/get/week" : {
      "get" : {
        "tags" : [ "Logs" ],
        "summary" : "Get logs for this week",
        "operationId" : "get log for Week",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Logs"
              }
            }
          }
        }
      }
    },
    "/logs/get/month" : {
      "get" : {
        "tags" : [ "Logs" ],
        "summary" : "Get logs for this month",
        "operationId" : "get log for Month",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Logs"
              }
            }
          }
        }
      }
    },
    "/logs/get/Year" : {
      "get" : {
        "tags" : [ "Logs" ],
        "summary" : "Get ogs for this year",
        "operationId" : "get logs for Year",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Logs"
              }
            }
          }
        }
      }
    },
    "/logs/add" : {
      "post" : {
        "tags" : [ "Logs" ],
        "summary" : "Add new logs",
        "operationId" : "add logs",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "logs",
          "description" : "New logs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Logs"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success"
          }
        }
      }
    },
    "/logs/delete" : {
      "delete" : {
        "tags" : [ "Logs" ],
        "summary" : "Delete logs",
        "operationId" : "delete logs",
        "consumes" : [ "appliaction/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "logs",
          "description" : "logs to delete",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Logs"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Logs not found"
          }
        }
      }
    }
  },
  "definitions" : {
    "Logs" : {
      "type" : "object",
      "properties" : {
        "employee" : {
          "type" : "object",
          "properties" : { }
        },
        "project" : {
          "type" : "object",
          "properties" : { }
        },
        "time" : {
          "type" : "integer",
          "format" : "double"
        },
        "comment" : {
          "type" : "string"
        },
        "date" : {
          "type" : "object",
          "properties" : { }
        }
      }
    }
  }
}
{
  "swagger" : "2.0",
  "info" : {
    "description" : "TimesheetManagement app. Mifort2019",
    "version" : "1.0.0",
    "title" : "Swagger TimesheetManagement"
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/AlenaChuvasova/TimesheetManagement/1.0.0",
  "tags" : [ {
    "name" : "Project",
    "description" : "Projects added to timesheet"
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/project/all" : {
      "get" : {
        "tags" : [ "Project" ],
        "summary" : "Add a new Project to log",
        "operationId" : "getAllProjects",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Project"
              }
            }
          }
        }
      }
    },
    "/project/{id}" : {
      "get" : {
        "tags" : [ "Project" ],
        "summary" : "Get Project by id",
        "operationId" : "getProject",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Project's id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Project not found"
          },
          "default" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          }
        }
      }
    },
    "/project/add" : {
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "add new Project",
        "operationId" : "addProject",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "project",
          "description" : "add some new Project",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/project/edit/{id}" : {
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "edit Projects by id",
        "operationId" : "editProject",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Project's id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "project",
          "description" : "update Project",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "description" : "Invalid id value"
          },
          "404" : {
            "description" : "Project not found"
          }
        }
      }
    },
    "/project/delete/{id}" : {
      "delete" : {
        "tags" : [ "Project" ],
        "summary" : "delete Projects",
        "operationId" : "deleteProject",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of project to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Project not found"
          }
        }
      }
    }
  },
  "definitions" : {
    "Project" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "startDate" : {
          "type" : "string"
        },
        "endDate" : {
          "type" : "string"
        },
        "logoUrl" : {
          "type" : "string"
        },
        "manHours" : {
          "type" : "integer"
        }
      }
    }
  }
}
tags: 
- name: Company
  description: Everything about your Companies 
- name: Employee
  description: Everything about your Employees 
  
# schemes: 
# - http
paths: 
  /company:
    get:
      tags: 
      - Company
      summary: All companies 
      operationId: getAllCompanies
      produces: 
      - application/json
      responses:
        default:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/Company'
              
  /company/{id}:
    get:
      tags:
      - Company
      summary: Find company by id
      operationId: getCompany
      produces: 
      - application/json
      parameters: 
      - name: id
        in: path
        description: Id of company to return 
        required: true
        type: integer
        minimum: 0.0
        format: int64
      responses:
        default:
          description: Success
          schema:
            $ref: '#/definitions/Company'
        400:
          description: Invalid id supplied
        404:
          description: Company not found
    post:
      tags:
      - Company
      summary: Add new company
      operationId: addCompany
      consumes: 
      - application/json
      parameters: 
      - name: id
        in: path
        description: Id of company to return 
        required: true
        type: integer
        minimum: 0.0
        format: int64
      - in: body
        name: company
        description: New company
        required: true
        schema:
          $ref: '#/definitions/Company'
      responses:
        201:
          description: Success
        409:
          description: Company already exist
    put:
      tags:
      - Company
      summary: Update company
      operationId: editCompany
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of company to return 
        required: true
        type: integer
        minimum: 0.0
        format: int64
      - in: body
        name: company
        description: Company to edit 
        required: true
        schema:
          $ref: '#/definitions/Company'
      responses:
        200:
          description: Success
        400:
          description: Invalid id supplied
        404:
          description: Company not found
    delete:
      tags:
      - Company
      summary: Delete company
      operationId: deleteCompany
      consumes: 
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of company to delete
        required: true
        type: integer
        minimum: 0.0
        format: int64
      responses: 
        200:
          description: Success
        400:
          description: Invalid id supplied
        404:
          description: Company not found

  /employee:
    get:
      tags:
      - Employee
      summary: All employees
      operationId: getAllEmployees
      produces: 
      - application/json
      responses: 
        default:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
  
  /employee/{id}:
    get:
      tags:
      - Employee
      summary: Find employee by id 
      operationId: getEmployee
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of employee to return
        required: true
        type: integer
        minimum: 0.0
        format: int64
      responses:
        default:
          description: Success
          schema:
            $ref: '#/definitions/Employee'
        400:
          description: Invalid id supplied
        404:
          description: Employee not found
    post:
      tags:
      - Employee
      summary: Add new employee
      operationId: addEmployee
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of employee to return 
        required: true
        type: integer
        minimum: 0.0
        format: int 64
      - in: body
        name: employee
        description: New employee
        required: true
        schema:
          $ref: '#/definitions/Employee'
      responses:
        201:
          description: Success
        409:
          description: Employee already exist
    put:
      tags:
      - Employee
      summary: Update employee
      operationId: editEmployee
      consumes: 
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of employee to return
        required: true
        type: integer
        minimum: 0.0
        format: int64
      - in: body
        name: employee
        description: Employee to edit
        required: true
        schema: 
          $ref: '#/definitions/Employee'
      responses: 
        201:
          description: Success
        400: 
          description: Invalid id supplied 
        404: 
          description: Employee not found
    delete:
      tags: 
      - Employee
      summary: Delete employee
      operationId: deleteEmployee
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of employee to delete
        required: true
        type: integer
        minimum: 0.0
        format: int64
      responses:
        200:
          description: Success
        400: 
          description: Invalid id supplied
        404:
          description: Employee not found
          
definitions: 
  Company: 
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      logoUrl:
        type: string
        format: url
      settings:
        type: array
        items: 
          $ref: '#/definitions/Settings'
      integrations:
        type: array
        items: 
          $ref: '#/definitions/Integrations'          
  Settings: 
    type: object
    properties: 
      id:
        type: integer
        format: int64
      comments: 
        type: string
      companyActivites:
        type: string
      startFromWeekday:
        type: string
      approvalPeriods:
        type: string
  Integrations: 
    type: object
    properties: 
      id:
        type: integer
        format: int64
      Jira: 
        type: string
        format: url
      Slack:
        type: string
        format: url
  Employee: 
    type: object
    properties: 
      id:
        type: integer
        format: int64
      name: 
        type: string
      photo:
        type: string
        format: url
      email:
        type: string
        format: email
  
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com

schemes:
 - https
 - http


